# name: Integration SQL Server Database

# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up .NET Core
#         uses: actions/setup-dotnet@v1
#         with:
#           dotnet-version: '6.0.x'
#       - name: Build with MSBuild
#         run: |
#           msbuild /t:Build /p:Configuration=Release ./TimeTac.Database/TimeTac.Database.sqlproj
#       - name: Publish to SQL Server
#         run: |
#           sqlpackage.exe /a:Publish /tsn:(localDb)\MSSQLLocalDB /tdn:TimeTac /tu:myuser /tp:mypassword /sf:./TimeTac/bin/Release/TimeTac.dacpac

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Build and Deploy SQL Server Database
#       uses: actions/checkout@v3
#     # - uses: azure/sql-action@v2.2
#     #   with:   
#     #     server-name: ${{ secrets.SERVER_NAME }}    
#     #     connection-string: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}
#     #     path: './TimeTac.Database/TimeTac.Database.sqlproj'
#     #     action: 'publish'
#     - run: |
#         msbuild /t:Build /p:Configuration=Release ./TimeTac.Database/TimeTac.Database.sqlproj
#         sqlpackage.exe /a:Publish /tsn:(localDb)\MSSQLLocalDB /tdn:MyDatabase /tu:myuser /tp:mypassword /sf:./MyDatabase/bin/Release/MyDatabase.dacpac

# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

# trigger:
# - main

# pool:
#   vmImage: 'windows-latest'

# variables:
#   solution: '**/*.sln'
#   buildPlatform: 'Any CPU'
#   buildConfiguration: 'Release'

# steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
    
# - task: CopyFiles@2
#   inputs:
#     SourceFolder: '$(System.DefaultWorkingDirectory)'
#     Contents: 'SQLDatabase\bin\Release\SQLDatabase.dacpac'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'

# name: Integration SQL Server Database

# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]

# jobs:
#   build:
#     runs-on: self-hosted
#     steps:
#     - uses: actions/checkout@v3
#     - uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}
#     - uses: azure/sql-action@v2.2
#       with:        
#         connection-string: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}
#         server-name: ${{ secrets.SERVER_NAME }} 
#         path: './TimeTac.Database/TimeTac.Database.sqlproj'
#         action: 'publish'
#         build-arguments: '-c Release'                
#         arguments: '/p:DropObjectsNotInSource=true'   
#     - run: |
#         msbuild /t:Build /p:Configuration=Release ./TimeTac.Database/TimeTac.Database.sqlproj
#         sqlpackage.exe /a:Publish /tsn:(localDb)\MSSQLLocalDB /tdn:TimeTac /tu:myuser /tp:mypassword /sf:./TimeTac/bin/Release/TimeTac.dacpac

# jobs:
#   build:
#     runs-on: windows-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: Setup MSBuild.exe
#       uses: microsoft/setup-msbuild@v1.0.3
#     - name: Build solution
#       run: msbuild /t:Build /p:Configuration=Release ./TimeTac.Database/TimeTac.Database.sqlproj
#     - name: Azure sql actions
#       uses: azure/sql-action@v2.2
#       with:   
#         server-name: (localDb)\MSSQLLocalDB  
#         connection-string: Server=localhost\SQLEXPRESS01;Database=TimeTac;User Id=myuser;Password=mypassword;
#         path: './TimeTac.Database/TimeTac.Database.sqlproj'
#         action: 'publish'
#     - name: Publish to MSBuild SSMS
#       # run: sqlpackage.exe /a:Publish /tsn:(localDb)\MSSQLLocalDB /tdn:TimeTac /tu:myuser /tp:mypassword /sf:./TimeTac/bin/Release/TimeTac.dacpac
#       run: sqlpackage.exe /a:Publish /tsn:(localDb)\MSSQLLocalDB /tdn:TimeTac /tu:myuser /tp:mypassword /sf:./TimeTac/bin/Release/TimeTac.dacpac

name: Integration SQL Server Database

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true


# jobs:
#   build:
#     runs-on: windows-latest
#     defaults:
#       run:
#         shell: pwsh
#         working-directory: F:\Mine\TimeTac\TimeTac.Database\TimeTac.Database\
#     steps:
#     - uses: actions/checkout@v2
#     - name: Change directory
#       run: cd F:\Mine\TimeTac\TimeTac.Database\TimeTac.Database
#     - name: Setup .NET Core
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: '7.0.x'
#     - name: Publish to MSBuild SSMS
#       run: | 
#         msbuild /t:Build;Publish /p:SqlPublishProfilePath="./TimeTac_1.Database.publish.xml" /p:Publish_TargetConnectionString="Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=TimeTac;Integrated Security=True" "./TimeTac.Database.sqlproj"

jobs:

  # Job to build and publish the dacpac
  BuildDacpac:
    # Easier to use Github-hosted runner if updating in GitHub
    # windows-2019 image works better at the moment
    runs-on: windows-2019

    defaults:
      run:
        shell: pwsh
        working-directory: ${{ github.workspace }}/TimeTac.Database/

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.3.0
      # Find msbuild
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3.1
      # create dacpac using MSBUILD
      - name: Build Database project
        run: |
          msbuild.exe TimeTac.Database.sqlproj /p:Configuration=Release
      # Publish artifact
      - uses: actions/upload-artifact@v3.1.2
        with:
          name: AzureSQLDB
          path: ${{ github.workspace }}/bin/Release/   

    # Deploy dacpac job
  DeployDacpac:
    # Set the dependency for the build job
    needs: BuildDacpac
    # Easier to use Github-hosted runner if updating in GitHub
    runs-on: windows-latest

    # Steps to deploy the updates to Azure SQL Database
    # To keep this example simple, the Firewall settings in the logical SQL Server allows access from Azure services and resources
    # An alternative is to use the Azure Login GitHub Action https://github.com/marketplace/actions/azure-login
    steps:
      - name: download artifact containing dacpac
        # Downloads Data artifact to dacpac folder
        uses: actions/download-artifact@v3.0.2
        # with:
        #   name: AzureSQLDB
          
      # Login using Azure credentials 
      # Required to add a temporary firewall rule for the runner
      - uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Installs dacpac
      # For this to work you have a secret specified, default in my repo is blank
      # Requires a secret AZURESQLDB_CONNECTION_STRING which contains connection string to your Azure SQL Database
      - name: Azure SQL Deploy
        uses: Azure/sql-action@v2
        with:
          # The connection string, including authentication information, for the Azure SQL Database.
          connection-string: '${{ secrets.AZURE_SQL_CONNECTION_STRING }}'
          # Path to the dacpac file in the artifact
          path: './AzureSQLDB.dacpac'
          # Action we want it to do, in this case 'Publish' the contents of the dacpac to the database
          action: 'publish'